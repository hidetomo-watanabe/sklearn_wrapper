{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# init"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "%reload_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from logging import getLogger, StreamHandler, Formatter, INFO\n",
    "import logging.config\n",
    "logging.config.fileConfig(\n",
    "    './configs/logging.conf')\n",
    "    # './configs/logging.conf', disable_existing_loggers=False)\n",
    "logger = getLogger('predict')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "config_path = './configs/config.json'\n",
    "config_text = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from modules.Visualizer import Visualizer\n",
    "visualizer_obj = Visualizer(sample_frac=1, with_xlog=False)\n",
    "visualizer_obj.read_config_file(config_path)\n",
    "# visualizer_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# data translation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from modules.data_translaters.DataTranslater import DataTranslater\n",
    "translater_obj = DataTranslater()\n",
    "translater_obj.read_config_file(config_path)\n",
    "# translater_obj.read_config_text(config_text)\n",
    "translater_obj.get_translater()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### TRANSLATE')\n",
    "translater_obj.calc_train_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### WRITE TRAIN DATA')\n",
    "translater_obj.write_train_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### GET TRAIN DATA')\n",
    "train_data = translater_obj.get_train_data()\n",
    "post_processers = translater_obj.get_post_processers()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# data visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### GET DF DATA')\n",
    "df_data = translater_obj.get_df_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### DISPLAY RAW DFS')\n",
    "visualizer_obj.display_dfs(df_data['raw_train_df'], df_data['raw_test_df'], df_data['raw_pred_df'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### TRAIN RAW PROFILING')\n",
    "import pandas_profiling\n",
    "pandas_profiling.ProfileReport(Visualizer.sample_like(df_data['raw_train_df'], frac=0.01))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### TEST RAW PROFILING')\n",
    "import pandas_profiling\n",
    "pandas_profiling.ProfileReport(Visualizer.sample_like(df_data['raw_test_df'], frac=0.01))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### DISPLAY DFS')\n",
    "visualizer_obj.display_dfs(df_data['train_df'], df_data['test_df'], df_data['pred_df'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### TRAIN PROFILING')\n",
    "import pandas_profiling\n",
    "pandas_profiling.ProfileReport(Visualizer.sample_like(df_data['train_df'], frac=0.01))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### TEST PROFILING')\n",
    "import pandas_profiling\n",
    "pandas_profiling.ProfileReport(Visualizer.sample_like(df_data['test_df'], frac=0.01))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### TRAIN SCATTER MATRIX')\n",
    "visualizer_obj.plot_scatter_matrix(\n",
    "    np.concatenate([\n",
    "        visualizer_obj.toarray_like(train_data['X_train']),\n",
    "        train_data['Y_train']\n",
    "    ], axis=1),\n",
    "    train_data['feature_columns'] + visualizer_obj.pred_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### TEST SCATTER MATRIX')\n",
    "visualizer_obj.plot_scatter_matrix(\n",
    "    visualizer_obj.toarray_like(train_data['X_test']),\n",
    "    train_data['feature_columns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT TRAIN CORRCOEF')\n",
    "visualizer_obj.plot_corrcoef(\n",
    "    np.concatenate([\n",
    "        visualizer_obj.toarray_like(train_data['X_train']),\n",
    "        train_data['Y_train']\n",
    "    ], axis=1),\n",
    "    train_data['feature_columns'] + visualizer_obj.pred_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT TEST CORRCOEF')\n",
    "visualizer_obj.plot_corrcoef(\n",
    "    visualizer_obj.toarray_like(train_data['X_test']),\n",
    "    train_data['feature_columns']\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT Y TRAIN HISTOGRAM')\n",
    "visualizer_obj.plot_ndarray_histograms(\n",
    "    [train_data['Y_train']], ['y'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT X TRAIN HISTOGRAM')\n",
    "for pred_col in visualizer_obj.pred_cols:\n",
    "    visualizer_obj.plot_df_histograms(\n",
    "        df_data['train_df'],\n",
    "        df_data['pred_df'][pred_col].to_numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT X TRAIN TEST HISTOGRAM')\n",
    "visualizer_obj.plot_df_histograms(\n",
    "    pd.concat([df_data['train_df'], df_data['test_df']]),\n",
    "    np.concatenate(\n",
    "        (np.zeros(train_data['X_train'].shape[0]), np.ones(train_data['X_test'].shape[0])),\n",
    "        axis=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT X TRAIN WITH 2 DIMENSIONS')\n",
    "df_2d_train = visualizer_obj.plot_with_2_dimensions(\n",
    "    visualizer_obj.toarray_like(train_data['X_train']),\n",
    "    train_data['Y_train'],\n",
    "    train_data['train_ids']\n",
    ")\n",
    "display(df_2d_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT X TRAIN TEST WITH 2 DIMENSIONS')\n",
    "df_2d_train_test = visualizer_obj.plot_with_2_dimensions(\n",
    "    np.concatenate((\n",
    "        visualizer_obj.toarray_like(train_data['X_train']),\n",
    "        visualizer_obj.toarray_like(train_data['X_test'])\n",
    "    ), axis=0),\n",
    "    np.concatenate(\n",
    "        (np.zeros(train_data['X_train'].shape[0]), np.ones(train_data['X_test'].shape[0])),\n",
    "        axis=0),\n",
    "    np.concatenate((train_data['train_ids'], train_data['test_ids']), axis=0))\n",
    "display(df_2d_train_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### clfのみ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### VISUALIZE DECISION TREE')\n",
    "visualizer_obj.visualize_decision_tree(\n",
    "    visualizer_obj.toarray_like(train_data['X_train']),\n",
    "    train_data['Y_train'],\n",
    "    train_data['feature_columns'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### imageのみ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### DRAW IMAGES')\n",
    "visualizer_obj.draw_images(train_data['X_train'], train_data['Y_train'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from modules.trainers.Trainer import Trainer\n",
    "trainer_obj = Trainer(**train_data)\n",
    "trainer_obj.read_config_file(config_path)\n",
    "# trainer_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### FIT')\n",
    "trainer_obj.calc_estimator_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### WRITE ESTIMATOR DATA')\n",
    "trainer_obj.write_estimator_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### GET ESTIMATOR DATA')\n",
    "estimator_data = trainer_obj.get_estimator_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT LEARNING CURVES')\n",
    "for modelname, estimator in estimator_data['single_estimators']:\n",
    "    title = 'learning curves: %s' % modelname\n",
    "    visualizer_obj.plot_learning_curve(\n",
    "        title, estimator,\n",
    "        train_data['X_train'], train_data['Y_train'],\n",
    "        estimator_data['scorer'], estimator_data['val_cv'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT PARTIAL DEPENDENCE')\n",
    "from sklearn.inspection import plot_partial_dependence\n",
    "\n",
    "for modelname, estimator in estimator_data['single_estimators']:\n",
    "    logger.info(f'##### {modelname}')\n",
    "    for feature in train_data['feature_columns']:\n",
    "        plot_partial_dependence(\n",
    "            estimator=estimator,\n",
    "            X=visualizer_obj.toarray_like(train_data['X_train']),\n",
    "            features=[feature], feature_names=[feature])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### SHAP')\n",
    "\n",
    "for modelname, estimator in estimator_data['single_estimators']:\n",
    "    _estimator = estimator.steps[0][1]  # change properly\n",
    "    logger.info(f'##### {modelname}')\n",
    "    visualizer_obj.display_shap(\n",
    "        _estimator, train_data['X_train'], train_data['Y_train'], train_data['feature_columns'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from modules.Outputer import Outputer\n",
    "outputer_obj = Outputer(\n",
    "    **train_data, **estimator_data, **post_processers)\n",
    "outputer_obj.read_config_file(config_path)\n",
    "# outputer_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PREDICT')\n",
    "outputer_obj.calc_predict_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### GET PREDICT DATA')\n",
    "pred_data = outputer_obj.get_predict_data()\n",
    "Y_train_pred, Y_train_pred_proba = outputer_obj.predict_like(\n",
    "    train_mode=outputer_obj.configs['fit']['train_mode'], estimator=estimator_data['estimator'],\n",
    "    X_train=train_data['X_train'], Y_train=train_data['Y_train'],\n",
    "    X_target=train_data['X_train'])\n",
    "single_y_preds = []\n",
    "single_y_pred_probas = []\n",
    "for _estimator in estimator_data['single_estimators']:\n",
    "    _y_pred, _y_pred_proba = outputer_obj.predict_like(\n",
    "        train_mode=outputer_obj.configs['fit']['train_mode'], estimator=_estimator[1],\n",
    "        X_train=train_data['X_train'], Y_train=train_data['Y_train'],\n",
    "        X_target=train_data['X_test'])\n",
    "    single_y_preds.append(_y_pred)\n",
    "    single_y_pred_probas.append(_y_pred_proba[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### WRITE PREDICT DATA')\n",
    "outputer_obj.write_predict_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### clfのみ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### CONFUSION MATRIX')\n",
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix(train_data['Y_train'], Y_train_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT X TRAIN WITH 2 DIMENSIONS')\n",
    "logger.info('### Y_train')\n",
    "df_2d_train_y_train = visualizer_obj.plot_with_2_dimensions(\n",
    "    visualizer_obj.toarray_like(train_data['X_train']),\n",
    "    train_data['Y_train'],\n",
    "    train_data['train_ids'])\n",
    "logger.info('### Y_train_pred')\n",
    "df_2d_train_y_train_pred = visualizer_obj.plot_with_2_dimensions(\n",
    "    visualizer_obj.toarray_like(train_data['X_train']),\n",
    "    Y_train_pred,\n",
    "    train_data['train_ids'])\n",
    "display(df_2d_train_y_train_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT X TRAIN WITH 2 DIMENSIONS, ONLY ERROR')\n",
    "logger.info('### Y_train')\n",
    "error_index = np.where(train_data['Y_train'].reshape(-1,) != Y_train_pred)\n",
    "df_2d_train_y_train_error = visualizer_obj.plot_with_2_dimensions(\n",
    "    visualizer_obj.toarray_like(train_data['X_train'])[error_index],\n",
    "    train_data['Y_train'][error_index],\n",
    "    train_data['train_ids'][error_index])\n",
    "display(df_2d_train_y_train_error)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### change visualizer sample frac')\n",
    "visualizer_obj.sample_frac = 1.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT ROC')\n",
    "visualizer_obj.plot_roc(\n",
    "    train_data['Y_train'], Y_train_pred_proba[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT Y TRAIN TEST PREDS HISTOGRAM')\n",
    "visualizer_obj.plot_ndarray_histograms(\n",
    "    [Y_train_pred, pred_data['Y_pred']], ['train', 'test'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT Y TRAIN TEST PRED PROBAS HISTOGRAM')\n",
    "visualizer_obj.plot_ndarray_histograms(\n",
    "    [Y_train_pred_proba[:, 1], pred_data['Y_pred_proba'][:, 1]], ['train', 'test'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT SINGLE Y TRAIN PREDS HISTOGRAM')\n",
    "visualizer_obj.plot_ndarray_histograms(\n",
    "    single_y_preds, [_estimator[0] for _estimator in estimator_data['single_estimators']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### PLOT SINGLE Y TRAIN PRED PROBAS HISTOGRAM')\n",
    "visualizer_obj.plot_ndarray_histograms(\n",
    "    single_y_pred_probas, [_estimator[0] for _estimator in estimator_data['single_estimators']])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
